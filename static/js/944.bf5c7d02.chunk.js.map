{"version":3,"file":"static/js/944.bf5c7d02.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/nft-collection-a459ad81.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aK as StandardErc721, cV as ContractWrapper, cW as buildTransactionFunction, am as ContractMetadata, d7 as TokenErc721ContractSchema, b4 as ContractAppURI, an as ContractRoles, ao as ContractRoyalty, ap as ContractPrimarySale, al as ContractEncoder, aZ as GasCostEstimator, a_ as ContractEvents, b0 as ContractPlatformFee, a$ as ContractInterceptor, aB as Erc721, aE as Erc721WithQuantitySignatureMintable, b2 as ContractOwner, bG as getRoleHash, b3 as Transaction } from './getContract-bf1ae195.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-collection\");\n * ```\n *\n * @public\n */\nclass NFTCollection extends StandardErc721 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"app\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc721\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Mint a unique NFT\n     *\n     * @remarks Mint a unique NFT to a specified wallet.\n     *\n     * @example\n     * ```javascript*\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * };\n     *\n     * const tx = await contract.mint(metadata);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mint\", buildTransactionFunction(async metadata => {\n      return this.erc721.mint.prepare(metadata);\n    }));\n    /**\n     * Mint a unique NFT\n     *\n     * @remarks Mint a unique NFT to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * };\n     *\n     * const tx = await contract.mintTo(walletAddress, metadata);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintTo\", buildTransactionFunction(async (walletAddress, metadata) => {\n      return this.erc721.mintTo.prepare(walletAddress, metadata);\n    }));\n    /**\n     * Mint Many unique NFTs\n     *\n     * @remarks Mint many unique NFTs at once to the connected wallet\n     *\n     * @example\n     * ```javascript*\n     * // Custom metadata of the NFTs you want to mint.\n     * const metadatas = [{\n     *   name: \"Cool NFT #1\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT #2\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/other/image.png\"),\n     * }];\n     *\n     * const tx = await contract.mintBatch(metadatas);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintBatch\", buildTransactionFunction(async metadata => {\n      return this.erc721.mintBatch.prepare(metadata);\n    }));\n    /**\n     * Mint Many unique NFTs\n     *\n     * @remarks Mint many unique NFTs at once to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFTs you want to mint.\n     * const metadatas = [{\n     *   name: \"Cool NFT #1\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT #2\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/other/image.png\"),\n     * }];\n     *\n     * const tx = await contract.mintBatchTo(walletAddress, metadatas);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintBatchTo\", buildTransactionFunction(async (walletAddress, metadata) => {\n      return this.erc721.mintBatchTo.prepare(walletAddress, metadata);\n    }));\n    /**\n     * Burn a single NFT\n     * @param tokenId - the token Id to burn\n     *\n     * @example\n     * ```javascript\n     * const result = await contract.burnToken(tokenId);\n     * ```\n     */\n    _defineProperty(this, \"burn\", buildTransactionFunction(tokenId => {\n      return this.erc721.burn.prepare(tokenId);\n    }));\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTCollection.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.erc721.getMintTransaction(receiver, metadata);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(NFTCollection, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { NFTCollection };\n"],"names":["NFTCollection","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","buildTransactionFunction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","metadata","wrap","_context","prev","next","abrupt","erc721","mint","prepare","stop","_x","apply","_ref2","_callee2","walletAddress","_context2","mintTo","_x2","_x3","_ref3","_callee3","_context3","mintBatch","_x4","_ref4","_callee4","_context4","mintBatchTo","_x5","_x6","tokenId","burn","ContractMetadata","TokenErc721ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","Erc721","signature","Erc721WithQuantitySignatureMintable","owner","ContractOwner","_createClass","key","value","this","updateSignerOrProvider","readContract","_isTransferRestricted","_callee5","anyoneCanTransfer","_context5","hasRole","getRoleHash","constants","sent","_getMintTransaction","_callee6","receiver","_context6","getMintTransaction","_x7","_x8","_prepare","_callee7","method","args","overrides","_context7","Transaction","_x9","_x10","_x11","_call","_callee8","functionName","_this$contractWrapper","_len","_key","_args8","_context8","Array","concat","_x12","StandardErc721"],"sourceRoot":""}