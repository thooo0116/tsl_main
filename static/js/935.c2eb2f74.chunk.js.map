{"version":3,"file":"static/js/935.c2eb2f74.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/signature-drop-4c2fa91c.esm.js"],"sourcesContent":["import { _ as _defineProperty, c as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-da88d27c.esm.js';\nimport { aK as StandardErc721, cV as ContractWrapper, cW as buildTransactionFunction, am as ContractMetadata, d8 as DropErc721ContractSchema, b4 as ContractAppURI, an as ContractRoles, ao as ContractRoyalty, ap as ContractPrimarySale, al as ContractEncoder, aZ as GasCostEstimator, a_ as ContractEvents, b0 as ContractPlatformFee, a$ as ContractInterceptor, aB as Erc721, ar as DropClaimConditions, aE as Erc721WithQuantitySignatureMintable, aq as DelayedReveal, d9 as FEATURE_NFT_REVEALABLE, b2 as ContractOwner, cS as PaperCheckout, bG as getRoleHash, b3 as Transaction } from './getContract-bf1ae195.esm.js';\nimport { BigNumber, constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");\n * ```\n *\n * @public\n */\nclass SignatureDrop extends StandardErc721 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let _options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, _options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"erc721\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"app\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"revealer\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"checkout\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create a batch of unique NFTs to be claimed in the future\n     *\n     * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     */\n    _defineProperty(this, \"createBatch\", buildTransactionFunction(async (metadatas, options) => {\n      return this.erc721.lazyMint.prepare(metadatas, options);\n    }));\n    /**\n     * Claim unique NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 1; // how many unique NFTs you want to claim\n     *\n     * const tx = await contract.claimTo(address, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const claimedTokenId = tx.id; // the id of the NFT claimed\n     * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     *\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     */\n    _defineProperty(this, \"claimTo\", buildTransactionFunction(async (destinationAddress, quantity, options) => {\n      return this.erc721.claimTo.prepare(destinationAddress, quantity, options);\n    }));\n    /**\n     * Claim NFTs to the connected wallet.\n     *\n     * @remarks See {@link NFTDrop.claimTo}\n     *\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     */\n    _defineProperty(this, \"claim\", buildTransactionFunction(async (quantity, options) => {\n      return this.erc721.claim.prepare(quantity, options);\n    }));\n    /**\n     * Burn a single NFT\n     * @param tokenId - the token Id to burn\n     * @example\n     * ```javascript\n     * const result = await contract.burnToken(tokenId);\n     * ```\n     */\n    _defineProperty(this, \"burn\", buildTransactionFunction(async tokenId => {\n      return this.erc721.burn.prepare(tokenId);\n    }));\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, SignatureDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(SignatureDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { SignatureDrop };\n"],"names":["SignatureDrop","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","_options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","buildTransactionFunction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","metadatas","options","wrap","_context","prev","next","abrupt","erc721","lazyMint","prepare","stop","_x","_x2","apply","_ref2","_callee2","destinationAddress","quantity","_context2","claimTo","_x3","_x4","_x5","_ref3","_callee3","_context3","claim","_x6","_x7","_ref4","_callee4","tokenId","_context4","burn","_x8","metadata","ContractMetadata","DropErc721ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","Erc721","claimConditions","DropClaimConditions","signature","Erc721WithQuantitySignatureMintable","revealer","DelayedReveal","FEATURE_NFT_REVEALABLE","nextTokenIdToMint","owner","ContractOwner","checkout","PaperCheckout","_createClass","key","value","this","updateSignerOrProvider","readContract","_totalSupply","_callee5","claimed","unclaimed","_context5","totalClaimedSupply","sent","totalUnclaimedSupply","add","_getAllClaimed","_callee6","queryParams","start","count","maxId","_this2","_context6","BigNumber","toNumber","DEFAULT_QUERY_ALL_COUNT","t0","Math","t1","t2","min","Promise","all","Array","from","keys","map","i","get","toString","_x9","_getAllUnclaimed","_callee7","firstTokenId","_this3","_context7","t3","t4","max","t5","t6","t7","t8","t9","sub","getTokenMetadata","_x10","_totalClaimedSupply","_callee8","_context8","_totalUnclaimedSupply","_callee9","_context9","_isTransferRestricted","_callee10","anyoneCanTransfer","_context10","hasRole","getRoleHash","constants","_getClaimTransaction","_callee11","_context11","getClaimTransaction","_x11","_x12","_x13","_prepare","_callee12","method","args","overrides","_context12","Transaction","_x14","_x15","_x16","_call","_callee13","functionName","_this$contractWrapper","_len","_key","_args13","_context13","concat","_x17","StandardErc721"],"sourceRoot":""}