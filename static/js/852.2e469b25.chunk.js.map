{"version":3,"file":"static/js/852.2e469b25.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/token-79c08df0.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aA as StandardErc20, cV as ContractWrapper, cW as buildTransactionFunction, am as ContractMetadata, de as TokenErc20ContractSchema, b4 as ContractAppURI, an as ContractRoles, ap as ContractPrimarySale, a_ as ContractEvents, ax as TokenERC20History, al as ContractEncoder, aZ as GasCostEstimator, b0 as ContractPlatformFee, a$ as ContractInterceptor, ay as Erc20SignatureMintable, bG as getRoleHash, b3 as Transaction } from './getContract-bf1ae195.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n\n/**\n * Create a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token\");\n * ```\n *\n * @public\n */\nclass Token extends StandardErc20 {\n  /**\n   * Signature Minting\n   * @remarks Generate tokens that can be minted only with your own signature, attaching your own set of mint conditions.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the tokens\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"app\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"history\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Mint Tokens for the connected wallet\n     *\n     * @remarks See {@link Token.mintTo}\n     */\n    _defineProperty(this, \"mint\", buildTransactionFunction(async amount => {\n      return this.erc20.mint.prepare(amount);\n    }));\n    /**\n     * Mint Tokens\n     *\n     * @remarks Mint tokens to a specified address.\n     *\n     * @example\n     * ```javascript\n     * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n     * const amount = \"1.5\"; // The amount of this token you want to mint\n     *\n     * await contract.mintTo(toAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"mintTo\", buildTransactionFunction(async (to, amount) => {\n      return this.erc20.mintTo.prepare(to, amount);\n    }));\n    /**\n     * Mint Tokens To Many Wallets\n     *\n     * @remarks Mint tokens to many wallets in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Data of the tokens you want to mint\n     * const data = [\n     *   {\n     *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n     *     amount: 0.2, // How many tokens to mint to specified address\n     *   },\n     *  {\n     *    toAddress: \"0x...\",\n     *    amount: 1.4,\n     *  }\n     * ]\n     *\n     * await contract.mintBatchTo(data);\n     * ```\n     */\n    _defineProperty(this, \"mintBatchTo\", buildTransactionFunction(async args => {\n      return this.erc20.mintBatchTo.prepare(args);\n    }));\n    /**\n     * Lets you delegate your voting power to the delegateeAddress\n     *\n     * @param delegateeAddress - delegatee wallet address\n     * @alpha\n     */\n    _defineProperty(this, \"delegateTo\", buildTransactionFunction(async delegateeAddress => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"delegate\",\n        args: [delegateeAddress]\n      });\n    }));\n    /**\n     * Burn Tokens\n     *\n     * @remarks Burn tokens held by the connected wallet\n     *\n     * @example\n     * ```javascript\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.burnTokens(amount);\n     * ```\n     */\n    _defineProperty(this, \"burn\", buildTransactionFunction(amount => {\n      return this.erc20.burn.prepare(amount);\n    }));\n    /**\n     * Burn Tokens\n     *\n     * @remarks Burn tokens held by the specified wallet\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet sending the tokens\n     * const holderAddress = \"{{wallet_address}}\";\n     *\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.burnFrom(holderAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"burnFrom\", buildTransactionFunction(async (holder, amount) => {\n      return this.erc20.burnFrom.prepare(holder, amount);\n    }));\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Token.contractRoles);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new TokenERC20History(this.contractWrapper, this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc20SignatureMintable(this.contractWrapper, this.roles);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return this.erc20.getMintTransaction(to, amount);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Token, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { Token };\n"],"names":["Token","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_defineProperty","_assertThisInitialized","buildTransactionFunction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","amount","wrap","_context","prev","next","abrupt","erc20","mint","prepare","stop","_x","apply","_ref2","_callee2","to","_context2","mintTo","_x2","_x3","_ref3","_callee3","args","_context3","mintBatchTo","_x4","_ref4","_callee4","delegateeAddress","_context4","Transaction","method","_x5","burn","_ref5","_callee5","holder","_context5","burnFrom","_x6","_x7","metadata","ContractMetadata","TokenErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","sales","ContractPrimarySale","events","ContractEvents","history","TokenERC20History","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","signature","Erc20SignatureMintable","_createClass","key","value","_getVoteBalance","_callee6","_context6","t0","this","getSignerAddress","t1","sent","getVoteBalanceOf","_getVoteBalanceOf","_callee7","account","_context7","readContract","getVotes","getValue","_x8","_getDelegation","_callee8","_context8","getDelegationOf","_getDelegationOf","_callee9","_context9","delegates","_x9","_isTransferRestricted","_callee10","anyoneCanTransfer","_context10","hasRole","getRoleHash","constants","_getMintTransaction","_callee11","_context11","getMintTransaction","_x10","_x11","_prepare","_callee12","overrides","_context12","_x12","_x13","_x14","_call","_callee13","functionName","_this$contractWrapper","_len","_key","_args13","_context13","Array","concat","_x15","StandardErc20"],"sourceRoot":""}