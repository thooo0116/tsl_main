{"version":3,"file":"static/js/765.3909c85a.chunk.js","mappings":"2QAsFMA,G,yjBAAW,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAiDf,SAAAA,EAAYK,EAASC,EAAUC,GAAS,IAAAC,EAClCC,GADkCC,EAAAA,EAAAA,GAAA,KAAAV,GAEtC,IAAIW,EAAWC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAChFG,EAAMH,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAC5CE,EAAUJ,UAAUC,OAAS,EAAID,UAAU,QAAKE,EAChDG,EAAkBL,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,IAAIM,EAAAA,GAAgBb,EAASC,EAAUS,EAAKJ,GA8HjF,OA7HrDH,EAAAL,EAAAgB,KAAA,KAAMF,EAAiBV,EAASS,GAChCP,GAAKW,EAAAA,EAAAA,GAAAZ,IACLa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,WAAO,IAC7Ba,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,aAAS,IAC/Ba,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,oBAAgB,IACtCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,eAAW,IACjCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,iBAAa,IACnCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,cAAU,IAChCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,gBAAY,IAClCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,WAAO,IAC7Ba,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,aAAS,IAC/Ba,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,iBAAa,IACnCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,uBAAmB,IACzCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,gBAAY,IAClCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,eAAW,IACjCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,mBAAe,IACrCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,eAAW,IACjCa,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,aAAS,IA8B/Ba,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,eAAec,EAAAA,EAAAA,IAAwB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOC,EAAWC,GAAO,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SAC9E1B,EAAK2B,QAAQC,SAASC,QAAQT,EAAWC,IAAQ,wBAAAE,EAAAO,OAAA,GAAAX,EAAA,KACzD,gBAAAY,EAAAC,GAAA,OAAAjB,EAAAkB,MAAA,KAAA7B,UAAA,EAF4D,MA0B7DS,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,WAAWc,EAAAA,EAAAA,IAAwB,eAAAoB,GAAAlB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAiB,EAAgBC,EAAoBC,EAASC,GAAQ,IAAAC,EAAAC,EAAApC,UAAA,OAAAa,EAAAA,EAAAA,KAAAK,MAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,OACX,OAA9Fc,IAAsBC,EAAUnC,OAAS,QAAsBC,IAAjBkC,EAAU,KAAmBA,EAAU,GAASC,EAAAf,OAAA,SAC3FzB,EAAM0B,QAAQe,QAAQb,QAAQO,EAAoBC,EAASC,EAAU,CAC1EC,oBAAAA,KACA,wBAAAE,EAAAX,OAAA,GAAAK,EAAA,KACH,gBAAAQ,EAAAC,EAAAC,GAAA,OAAAX,EAAAD,MAAA,KAAA7B,UAAA,EALwD,MAkBzDS,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,SAASc,EAAAA,EAAAA,IAAwB,eAAAgC,GAAA9B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAA6B,EAAgBV,EAASC,GAAQ,IAAAC,EAAAS,EAAAC,EAAA7C,UAAA,OAAAa,EAAAA,EAAAA,KAAAK,MAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OACW,OAA9Fc,IAAsBU,EAAU5C,OAAS,QAAsBC,IAAjB2C,EAAU,KAAmBA,EAAU,GAASC,EAAAzB,KAAA,EAC5ExB,EAAMQ,gBAAgB0C,mBAAkB,OAAjD,OAAPH,EAAOE,EAAAE,KAAAF,EAAAxB,OAAA,SACNzB,EAAMyC,QAAQb,QAAQmB,EAASX,EAASC,EAAUC,IAAoB,wBAAAW,EAAApB,OAAA,GAAAiB,EAAA,KAC9E,gBAAAM,EAAAC,GAAA,OAAAR,EAAAb,MAAA,KAAA7B,UAAA,EAJsD,MAgBvDS,EAAAA,EAAAA,IAAeD,EAAAA,EAAAA,GAAAZ,GAAO,cAAcc,EAAAA,EAAAA,IAAwB,eAAAyC,GAAAvC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAsC,EAAOnB,EAASoB,GAAM,OAAAxC,EAAAA,EAAAA,KAAAK,MAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,cAAAiC,EAAAhC,OAAA,SAC1E1B,EAAK2B,QAAQgC,KAAK9B,QAAQQ,EAASoB,IAAO,wBAAAC,EAAA5B,OAAA,GAAA0B,EAAA,KAClD,gBAAAI,EAAAC,GAAA,OAAAN,EAAAtB,MAAA,KAAA7B,UAAA,EAF2D,KAG5DJ,EAAKO,IAAMA,EACXP,EAAK8D,SAAW,IAAIC,EAAAA,GAAiB/D,EAAKS,gBAAiBuD,EAAAA,GAA2BhE,EAAKD,SAC3FC,EAAKiE,IAAM,IAAIC,EAAAA,GAAelE,EAAKS,gBAAiBT,EAAK8D,SAAU9D,EAAKD,SACxEC,EAAKmE,MAAQ,IAAIC,EAAAA,GAAcpE,EAAKS,gBAAiBjB,EAAY6E,eACjErE,EAAKsE,UAAY,IAAIC,EAAAA,GAAgBvE,EAAKS,gBAAiBT,EAAK8D,UAChE9D,EAAKwE,MAAQ,IAAIC,EAAAA,GAAoBzE,EAAKS,iBAC1CT,EAAK0E,gBAAkB,IAAIC,EAAAA,GAA2B3E,EAAKS,gBAAiBT,EAAK8D,SAAU9D,EAAKD,SAChGC,EAAK4E,OAAS,IAAIC,EAAAA,GAAe7E,EAAKS,iBACtCT,EAAK8E,QAAU,IAAIC,EAAAA,GAAmB/E,EAAK4E,QAC3C5E,EAAKgF,QAAU,IAAIC,EAAAA,GAAgBjF,EAAKS,iBACxCT,EAAKkF,UAAY,IAAIC,EAAAA,GAAiBnF,EAAKS,iBAC3CT,EAAKoF,aAAe,IAAIC,EAAAA,GAAoBrF,EAAKS,iBACjDT,EAAKsF,YAAc,IAAIC,EAAAA,GAAoBvF,EAAKS,iBAChDT,EAAK2B,QAAU,IAAI6D,EAAAA,GAAQxF,EAAKS,gBAAiBT,EAAKD,QAASS,GAC/DR,EAAKyF,SAAW,IAAIC,EAAAA,GAAc1F,EAAKS,iBACvCT,EAAK2F,MAAQ,IAAIC,EAAAA,GAAc5F,EAAKS,iBAAiBT,CACvD,CA2GC,OAzGD6F,EAAAA,EAAAA,GAAArG,EAAA,EAAAsG,IAAA,mBAAAC,MAGA,SAAiBlG,GACfmG,KAAKvF,gBAAgBwF,uBAAuBpG,EAC9C,GAAC,CAAAiG,IAAA,aAAAC,MACD,WACE,OAAOC,KAAKvF,gBAAgByF,aAAalD,OAC3C,GAQA,CAAA8C,IAAA,SAAAC,MAAA,eAAAI,GAAAnF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAcA,SAAAkF,EAAaC,GAAW,OAAApF,EAAAA,EAAAA,KAAAK,MAAA,SAAAgF,GAAA,cAAAA,EAAA9E,KAAA8E,EAAA7E,MAAA,cAAA6E,EAAA5E,OAAA,SACfsE,KAAKrE,QAAQ4E,OAAOF,IAAY,wBAAAC,EAAAxE,OAAA,GAAAsE,EAAA,UACxC,gBAAAI,GAAA,OAAAL,EAAAlE,MAAA,KAAA7B,UAAA,EAhBD,IAkBA,CAAA0F,IAAA,WAAAC,MAAA,eAAAU,GAAAzF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAcA,SAAAwF,EAAeC,GAAa,OAAA1F,EAAAA,EAAAA,KAAAK,MAAA,SAAAsF,GAAA,cAAAA,EAAApF,KAAAoF,EAAAnF,MAAA,cAAAmF,EAAAlF,OAAA,SACnBsE,KAAKrE,QAAQkF,SAASF,IAAc,wBAAAC,EAAA9E,OAAA,GAAA4E,EAAA,UAC5C,gBAAAI,GAAA,OAAAL,EAAAxE,MAAA,KAAA7B,UAAA,EAhBD,IAkBA,CAAA0F,IAAA,gBAAAC,MAAA,eAAAgB,GAAA/F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAKA,SAAA8F,IAAA,OAAA/F,EAAAA,EAAAA,KAAAK,MAAA,SAAA2F,GAAA,cAAAA,EAAAzF,KAAAyF,EAAAxF,MAAA,cAAAwF,EAAAvF,OAAA,SACSsE,KAAKrE,QAAQuF,cAAY,wBAAAD,EAAAnF,OAAA,GAAAkF,EAAA,UACjC,yBAAAD,EAAA9E,MAAA,KAAA7B,UAAA,EAPD,IASA,CAAA0F,IAAA,uBAAAC,MAAA,eAAAoB,GAAAnG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAAkG,IAAA,IAAAC,EAAA,OAAApG,EAAAA,EAAAA,KAAAK,MAAA,SAAAgG,GAAA,cAAAA,EAAA9F,KAAA8F,EAAA7F,MAAA,cAAA6F,EAAA7F,KAAA,EACkCuE,KAAKvF,gBAAgByF,aAAaqB,SAAQC,EAAAA,EAAAA,IAAY,YAAaC,EAAAA,GAAsB,OAAlG,OAAjBJ,EAAiBC,EAAAlE,KAAAkE,EAAA5F,OAAA,UACf2F,GAAiB,wBAAAC,EAAAxF,OAAA,GAAAsF,EAAA,UAC1B,yBAAAD,EAAAlF,MAAA,KAAA7B,UAAA,EAND,IAOA,CAAA0F,IAAA,sBAAAC,MAAA,eAAA2B,GAAA1G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAWA,SAAAyG,EAA0BvF,EAAoBC,EAASC,GAAQ,IAAAC,EAAAqF,EAAAxH,UAAA,OAAAa,EAAAA,EAAAA,KAAAK,MAAA,SAAAuG,GAAA,cAAAA,EAAArG,KAAAqG,EAAApG,MAAA,OACqC,OAA9Fc,IAAsBqF,EAAUvH,OAAS,QAAsBC,IAAjBsH,EAAU,KAAmBA,EAAU,GAASC,EAAAnG,OAAA,SAC3FsE,KAAKrE,QAAQmG,oBAAoB1F,EAAoBC,EAASC,EAAU,CAC7EC,oBAAAA,KACA,wBAAAsF,EAAA/F,OAAA,GAAA6F,EAAA,UACH,gBAAAI,EAAAC,EAAAC,GAAA,OAAAP,EAAAzF,MAAA,KAAA7B,UAAA,EAhBD,IAiBA,CAAA0F,IAAA,UAAAC,MAAA,eAAAmC,GAAAlH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAAiH,EAAcC,EAAQC,EAAMC,GAAS,OAAArH,EAAAA,EAAAA,KAAAK,MAAA,SAAAiH,GAAA,cAAAA,EAAA/G,KAAA+G,EAAA9G,MAAA,cAAA8G,EAAA7G,OAAA,SAC5B8G,EAAAA,GAAAA,oBAAgC,CACrC/H,gBAAiBuF,KAAKvF,gBACtB2H,OAAAA,EACAC,KAAAA,EACAC,UAAAA,KACA,wBAAAC,EAAAzG,OAAA,GAAAqG,EAAA,UACH,gBAAAM,EAAAC,EAAAC,GAAA,OAAAT,EAAAjG,MAAA,KAAA7B,UAAA,EAVD,IAYA,CAAA0F,IAAA,OAAAC,MAAA,eAAA6C,GAAA5H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAGA,SAAA2H,EAAWC,GAAY,IAAAC,EAAAC,EAAAX,EAAAY,EAAAC,EAAA9I,UAAA,OAAAa,EAAAA,EAAAA,KAAAK,MAAA,SAAA6H,GAAA,cAAAA,EAAA3H,KAAA2H,EAAA1H,MAAA,OACrB,IAASuH,EAAOE,EAAU7I,OAAQgI,EAAO,IAAIe,MAAMJ,EAAO,EAAIA,EAAO,EAAI,GAAIC,EAAO,EAAGA,EAAOD,EAAMC,IAClGZ,EAAKY,EAAO,GAAKC,EAAUD,GAC5B,OAAAE,EAAAzH,OAAA,UACMqH,EAAA/C,KAAKvF,iBAAgBE,KAAIsB,MAAA8G,EAAA,CAACD,GAAYO,OAAKhB,KAAK,wBAAAc,EAAArH,OAAA,GAAA+G,EAAA,UACxD,gBAAAS,GAAA,OAAAV,EAAA3G,MAAA,KAAA7B,UAAA,EARD,MAQCZ,CAAA,CAhSc,CAAS+J,EAAAA,MAkS1B1I,EAAAA,EAAAA,GAAgBrB,EAAa,gBAAiB,CAAC,QAAS,SAAU,Y","sources":["../node_modules/@thirdweb-dev/sdk/dist/edition-drop-5309b68e.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aS as StandardErc1155, cV as ContractWrapper, cW as buildTransactionFunction, am as ContractMetadata, cX as DropErc1155ContractSchema, b4 as ContractAppURI, an as ContractRoles, ao as ContractRoyalty, ap as ContractPrimarySale, as as DropErc1155ClaimConditions, a_ as ContractEvents, at as DropErc1155History, al as ContractEncoder, aZ as GasCostEstimator, b0 as ContractPlatformFee, a$ as ContractInterceptor, aL as Erc1155, cS as PaperCheckout, b2 as ContractOwner, bG as getRoleHash, b3 as Transaction } from './getContract-bf1ae195.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");\n * ```\n *\n * @public\n */\nclass EditionDrop extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, _address, storage) {\n    var _this;\n    let _options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, _address, abi, _options);\n    super(contractWrapper, storage, chainId);\n    _this = this;\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"app\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"checkout\", void 0);\n    _defineProperty(this, \"history\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create a batch of NFTs to be claimed in the future\n     *\n     * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     */\n    _defineProperty(this, \"createBatch\", buildTransactionFunction(async (metadatas, options) => {\n      return this.erc1155.lazyMint.prepare(metadatas, options);\n    }));\n    /**\n     * Claim NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const tokenId = 0; // the id of the NFT you want to claim\n     * const quantity = 1; // how many NFTs you want to claim\n     *\n     * const tx = await contract.claimTo(address, tokenId, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param tokenId - Id of the token you want to claim\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     * @param proofs - Array of proofs\n     *\n     * @returns - Receipt for the transaction\n     */\n    _defineProperty(this, \"claimTo\", buildTransactionFunction(async function (destinationAddress, tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return _this.erc1155.claimTo.prepare(destinationAddress, tokenId, quantity, {\n        checkERC20Allowance\n      });\n    }));\n    /**\n     * Claim a token to the connected wallet\n     *\n     * @remarks See {@link EditionDrop.claimTo}\n     *\n     * @param tokenId - Id of the token you want to claim\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     * @param proofs - Array of proofs\n     *\n     * @returns - Receipt for the transaction\n     */\n    _defineProperty(this, \"claim\", buildTransactionFunction(async function (tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const address = await _this.contractWrapper.getSignerAddress();\n      return _this.claimTo.prepare(address, tokenId, quantity, checkERC20Allowance);\n    }));\n    /**\n     * Burn a specified amount of a NFT\n     *\n     * @param tokenId - the token Id to burn\n     * @param amount - amount to burn\n     *\n     * @example\n     * ```javascript\n     * const result = await contract.burnTokens(tokenId, amount);\n     * ```\n     */\n    _defineProperty(this, \"burnTokens\", buildTransactionFunction(async (tokenId, amount) => {\n      return this.erc1155.burn.prepare(tokenId, amount);\n    }));\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, EditionDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(EditionDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\nexport { EditionDrop };\n"],"names":["EditionDrop","_StandardErc","_inherits","_super","_createSuper","network","_address","storage","_this2","_this","_classCallCheck","_options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_assertThisInitialized","_defineProperty","buildTransactionFunction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","metadatas","options","wrap","_context","prev","next","abrupt","erc1155","lazyMint","prepare","stop","_x","_x2","apply","_ref2","_callee2","destinationAddress","tokenId","quantity","checkERC20Allowance","_args2","_context2","claimTo","_x3","_x4","_x5","_ref3","_callee3","address","_args3","_context3","getSignerAddress","sent","_x6","_x7","_ref4","_callee4","amount","_context4","burn","_x8","_x9","metadata","ContractMetadata","DropErc1155ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","royalties","ContractRoyalty","sales","ContractPrimarySale","claimConditions","DropErc1155ClaimConditions","events","ContractEvents","history","DropErc1155History","encoder","ContractEncoder","estimator","GasCostEstimator","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","Erc1155","checkout","PaperCheckout","owner","ContractOwner","_createClass","key","value","this","updateSignerOrProvider","readContract","_getAll","_callee5","queryParams","_context5","getAll","_x10","_getOwned","_callee6","walletAddress","_context6","getOwned","_x11","_getTotalCount","_callee7","_context7","totalCount","_isTransferRestricted","_callee8","anyoneCanTransfer","_context8","hasRole","getRoleHash","constants","_getClaimTransaction","_callee9","_args9","_context9","getClaimTransaction","_x12","_x13","_x14","_prepare","_callee10","method","args","overrides","_context10","Transaction","_x15","_x16","_x17","_call","_callee11","functionName","_this$contractWrapper","_len","_key","_args11","_context11","Array","concat","_x18","StandardErc1155"],"sourceRoot":""}