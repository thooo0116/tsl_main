{"version":3,"file":"static/js/776.337dd1d3.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/token-drop-52fd5d63.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { aA as StandardErc20, cV as ContractWrapper, cW as buildTransactionFunction, am as ContractMetadata, dd as DropErc20ContractSchema, b4 as ContractAppURI, an as ContractRoles, al as ContractEncoder, aZ as GasCostEstimator, a_ as ContractEvents, ap as ContractPrimarySale, b0 as ContractPlatformFee, a$ as ContractInterceptor, ar as DropClaimConditions, bG as getRoleHash, b3 as Transaction } from './getContract-bf1ae195.esm.js';\nimport { constants } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");\n * ```\n *\n */\nclass TokenDrop extends StandardErc20 {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    var _this;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _this = this;\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"app\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Claim a certain amount of tokens\n     * @remarks See {@link TokenDrop.claimTo}\n     * @param amount - the amount of tokens to mint\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     */\n    _defineProperty(this, \"claim\", buildTransactionFunction(async function (amount) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this.claimTo.prepare(await _this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\n    }));\n    /**\n     * Claim a certain amount of tokens to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim Tokens.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 42.69; // how many tokens you want to claim\n     *\n     * const tx = await contract.claimTo(address, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param amount - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     *\n     * @returns - The transaction receipt\n     */\n    _defineProperty(this, \"claimTo\", buildTransactionFunction(async function (destinationAddress, amount) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this.erc20.claimTo.prepare(destinationAddress, amount, {\n        checkERC20Allowance\n      });\n    }));\n    /**\n     * Lets you delegate your voting power to the delegateeAddress\n     *\n     * @param delegateeAddress - delegatee wallet address\n     * @alpha\n     */\n    _defineProperty(this, \"delegateTo\", buildTransactionFunction(async delegateeAddress => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"delegate\",\n        args: [delegateeAddress]\n      });\n    }));\n    /**\n     * Burn Tokens\n     *\n     * @remarks Burn tokens held by the connected wallet\n     *\n     * @example\n     * ```javascript\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.burnTokens(amount);\n     * ```\n     */\n    _defineProperty(this, \"burnTokens\", buildTransactionFunction(async amount => {\n      return this.erc20.burn.prepare(amount);\n    }));\n    /**\n     * Burn Tokens\n     *\n     * @remarks Burn tokens held by the specified wallet\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet sending the tokens\n     * const holderAddress = \"{{wallet_address}}\";\n     *\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.burnFrom(holderAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"burnFrom\", buildTransactionFunction(async (holder, amount) => {\n      return this.erc20.burnFrom.prepare(holder, amount);\n    }));\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(TokenDrop, \"contractRoles\", [\"admin\", \"transfer\"]);\n\nexport { TokenDrop };\n"],"names":["TokenDrop","_StandardErc","_inherits","_super","_createSuper","network","address","storage","_this2","_this","_classCallCheck","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","call","_assertThisInitialized","_defineProperty","buildTransactionFunction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","amount","checkERC20Allowance","_args","wrap","_context","prev","next","t0","claimTo","getSignerAddress","t1","sent","t2","t3","abrupt","prepare","stop","_x","apply","_ref2","_callee2","destinationAddress","_args2","_context2","erc20","_x2","_x3","_ref3","_callee3","delegateeAddress","_context3","Transaction","method","args","_x4","_ref4","_callee4","_context4","burn","_x5","_ref5","_callee5","holder","_context5","burnFrom","_x6","_x7","metadata","ContractMetadata","DropErc20ContractSchema","app","ContractAppURI","roles","ContractRoles","contractRoles","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","sales","ContractPrimarySale","platformFees","ContractPlatformFee","interceptor","ContractInterceptor","claimConditions","DropClaimConditions","_createClass","key","value","_getVoteBalance","_callee6","_context6","this","getVoteBalanceOf","_getVoteBalanceOf","_callee7","account","_context7","readContract","getVotes","getValue","_x8","_getDelegation","_callee8","_context8","getDelegationOf","_getDelegationOf","_callee9","_context9","delegates","_x9","_isTransferRestricted","_callee10","anyoneCanTransfer","_context10","hasRole","getRoleHash","constants","_prepare","_callee11","overrides","_context11","_x10","_x11","_x12","_call","_callee12","functionName","_this$contractWrapper","_len","_key","_args12","_context12","Array","concat","_x13","StandardErc20"],"sourceRoot":""}